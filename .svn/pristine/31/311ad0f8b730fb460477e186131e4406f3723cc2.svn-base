using keyencePartsVerifier.MODELS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace keyencePartsVerifier.MAINTENANCE
{
    public partial class arrangePartsAssignment : Form
    {
        public arrangePartsAssignment()
        {
            InitializeComponent();
        }
        private transDataContext context = new transDataContext();
        bool isLoaded = false;
        
        private void data_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            gclass._dgvRows(sender,e,this.Font);
        }
        private void _filterData(object sender1, EventArgs e1)
        {
            if (isLoaded)
            {
                var tbl = (from z in context.tbl_web2_maintenances
                           where z.lineName.Contains(cb_line.Text) & z.machineName.Contains(cb_machine.Text.Trim()) & z.tableName.Contains(cb_table.Text.Trim()) & z.modelName.Contains(cb_model.Text.Trim())
                           select new { z.mnt_id, z.lineName, z.machineName, z.tableName, z.modelName, z.feederLocation, z.partsName }
                    //select z, x
                ).OrderBy(m => m.feederLocation).ToList();
                for (int i = 0; i < tbl.Count; i++)
                {
                    data.Rows.Add(tbl[i].mnt_id, tbl[i].modelName, tbl[i].lineName, tbl[i].machineName, tbl[i].tableName, tbl[i].feederLocation, tbl[i].partsName);
                }
            }
        }
        private void _loadModel()
        {
            var tbl = (from z in context.tbl_web2_maintenances select z.modelName.Trim()).Distinct().ToList();
            cb_model.DataSource = tbl;
        }
        private void _loadLines()
        {
            var tbl = (from z in context.tbl_web2_maintenances select z.lineName.Trim()).Distinct().ToList();
            cb_line.DataSource = tbl;
        }
        private void _loadTable()
        {
            var tbl = (from z in context.tbl_web2_maintenances select z.tableName.Trim()).Distinct().ToList();
            cb_table.DataSource = tbl;
        }
        private void _loadMachine()
        {
            var tbl = (from z in context.tbl_web2_maintenances select z.machineName.Trim()).Distinct().ToList();
            cb_machine.DataSource = tbl;
        }
        private void _loadAllData()
        {
            var tbl = (from z in context.tbl_web2_maintenances
                    select new { z.mnt_id, z.lineName, z.machineName, z.tableName, z.modelName, z.feederLocation, z.partsName }
                //select z, x
            ).OrderBy(m => m.feederLocation).ToList();

            for (int i = 0; i < tbl.Count; i++)
            {
                data.Rows.Add(tbl[i].mnt_id, tbl[i].modelName, tbl[i].lineName, tbl[i].machineName, tbl[i].tableName, tbl[i].feederLocation, tbl[i].partsName);
            }
        }
        private void arrangePartsAssignment_Load(object sender, EventArgs e)
        {
            _loadModel();
            _loadLines();
            _loadTable();
            _loadMachine();

            
            isLoaded = true;

            //_loadAllData();
        }

        private void btn_refresh_Click(object sender, EventArgs e)
        {
            _filterData(sender,e);
        }

        private void btn_move_down_Click(object sender, EventArgs e)
        {
            if (data.Rows.Count > 0)
            {
                int inIndex = data.CurrentRow.Index;
                if (inIndex != (data.Rows.Count - 1))
                {
                    DataGridViewRow dr = data.Rows[inIndex];
                    data.Rows.RemoveAt(inIndex);
                    data.Rows.Insert(inIndex + 1, dr);
                    data.CurrentCell = data.Rows[inIndex + 1].Cells[0];
                }
            }
        }

        private void btn_move_up_Click(object sender, EventArgs e)
        {
            if (data.Rows.Count > 0)
            {
                int inIndex = data.CurrentRow.Index;

                if (inIndex != 0)
                {
                    DataGridViewRow dr = data.Rows[inIndex];
                    data.Rows.RemoveAt(inIndex);
                    data.Rows.Insert(inIndex - 1, dr);
                    data.CurrentCell = data.Rows[inIndex - 1].Cells[0];
                }
            }
        }


    }
}
